(django2)
Zheng@Leos_Laptop MINGW64 ~/Onedrive/Desktop/Coding_Dojo/python_stack/django/django_intro/books_authors
$ migrations
Migrations for 'bna_app':
  apps\bna_app\migrations\0001_initial.py
    - Create model Author
    - Create model Book
(django2)
Zheng@Leos_Laptop MINGW64 ~/Onedrive/Desktop/Coding_Dojo/python_stack/django/django_intro/books_authors
$ migrate
Operations to perform:
  Apply all migrations: admin, auth, bna_app, contenttypes, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying bna_app.0001_initial... OK
  Applying sessions.0001_initial... OK
(django2)
Zheng@Leos_Laptop MINGW64 ~/Onedrive/Desktop/Coding_Dojo/python_stack/django/django_intro/books_authors
$ dj_shell
Python 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 22:22:05) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.4.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: quit()
(django2)
Zheng@Leos_Laptop MINGW64 ~/Onedrive/Desktop/Coding_Dojo/python_stack/django/django_intro/books_authors
$ migrations
Did you rename author.name to author.first_name (a CharField)? [y/N] y
You are trying to add a non-nullable field 'last_name' to author without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 2
(django2)
Zheng@Leos_Laptop MINGW64 ~/Onedrive/Desktop/Coding_Dojo/python_stack/django/django_intro/books_authors
$ migrations
Did you rename author.name to author.first_name (a CharField)? [y/N] y
Migrations for 'bna_app':
  apps\bna_app\migrations\0002_auto_20190418_1654.py
    - Rename field name on author to first_name
    - Remove field author from book
    - Add field books to author
    - Add field last_name to author
    - Add field desc to book
(django2)
Zheng@Leos_Laptop MINGW64 ~/Onedrive/Desktop/Coding_Dojo/python_stack/django/django_intro/books_authors
$ migrate
Operations to perform:
  Apply all migrations: admin, auth, bna_app, contenttypes, sessions
Running migrations:
  Applying bna_app.0002_auto_20190418_1654... OK
(django2)
Zheng@Leos_Laptop MINGW64 ~/Onedrive/Desktop/Coding_Dojo/python_stack/django/django_intro/books_authors
$ dj_shell
Python 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 22:22:05) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.4.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: from apps.bna_app.models import *

In [2]: Book.objects.create(title = "C Sharp", desc = "This is a book about C-Sharp")
Out[2]: <Book: Book object (1)>

In [3]: Book.objects.create(title = "Java", desc = "This is a book about Java")
Out[3]: <Book: Book object (2)>

In [4]: Book.objects.create(title = "Python", desc = "This is a book about Python")
Out[4]: <Book: Book object (3)>

In [5]: Book.objects.create(title = "PHP", desc = "This is a book about PHP")
Out[5]: <Book: Book object (4)>

In [6]: Book.objects.create(title = "Ruby", desc = "This is a book about Ruby")
Out[6]: <Book: Book object (5)>

In [7]: Author.objects.create(first_name = "Jane", last_name = "Austen")
Out[7]: <Author: Author object (1)>

In [8]: Author.objects.create(first_name = "Emily", last_name = "Dickinson")
Out[8]: <Author: Author object (2)>

In [9]: Author.objects.create(first_name = "Fyodor", last_name = "Dostoevksy")
Out[9]: <Author: Author object (3)>

In [10]: Author.objects.create(first_name = "William", last_name = "Shakespeare")
Out[10]: <Author: Author object (4)>

In [11]: Author.objects.create(first_name = "Lau", last_name = "Tzu")
Out[11]: <Author: Author object (5)>

In [12]: quit()
(django2)
Zheng@Leos_Laptop MINGW64 ~/Onedrive/Desktop/Coding_Dojo/python_stack/django/django_intro/books_authors
$ migrations
Migrations for 'bna_app':
  apps\bna_app\migrations\0003_author_note.py
    - Add field note to author
(django2)
Zheng@Leos_Laptop MINGW64 ~/Onedrive/Desktop/Coding_Dojo/python_stack/django/django_intro/books_authors
$ migrate
Operations to perform:
  Apply all migrations: admin, auth, bna_app, contenttypes, sessions
Running migrations:
  Applying bna_app.0003_author_note... OK
(django2)
Zheng@Leos_Laptop MINGW64 ~/Onedrive/Desktop/Coding_Dojo/python_stack/django/django_intro/books_authors
$ clear

(django2)
Zheng@Leos_Laptop MINGW64 ~/Onedrive/Desktop/Coding_Dojo/python_stack/django/django_intro/books_authors
$ dj_shell
Python 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 22:22:05) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.4.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: from apps.bna_app.models import *

In [2]: Book.objects.all().values
Out[2]: <bound method QuerySet.values of <QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>, <Book: Book object (5)>]>>

In [3]: Book.objects.all().values()
Out[3]: <QuerySet [{'id': 1, 'title': 'C Sharp', 'desc': 'This is a book about C-Sharp', 'created_at': datetime.datetime(2019, 4, 18, 20, 56, 27, 698716, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 56, 27, 698716, tzinfo=<UTC>)}, {'id': 2, 'title': 'Java', 'desc': 'This is a book about Java', 'created_at': datetime.datetime(2019, 4, 18, 20, 56, 47, 806738, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 56, 47, 806738, tzinfo=<UTC>)}, {'id': 3, 'title': 'Python', 'desc': 'This is a book about Python', 'created_at': datetime.datetime(2019, 4, 18, 20, 57, 3, 538835, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 57, 3, 538835, tzinfo=<UTC>)}, {'id': 4, 'title': 'PHP', 'desc': 'This is a book about PHP', 'created_at': datetime.datetime(2019, 4, 18, 20, 57, 17, 70457, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 57, 17, 70457, tzinfo=<UTC>)}, {'id': 5, 'title': 'Ruby', 'desc': 'This is a book about Ruby', 'created_at': datetime.datetime(2019, 4, 18, 20, 57, 31, 309795, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 57, 31, 309795, tzinfo=<UTC>)}]>

In [4]: update = Book.objects.get(id=1)

In [5]: update.title = "C#"

In [6]: update.save()

In [7]: update.desc = "This is book about C#"

In [8]: update.save()

In [9]: Book.objects.get(id=1).values()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-9-e8c0a0a666b2> in <module>
----> 1 Book.objects.get(id=1).values()

AttributeError: 'Book' object has no attribute 'values'

In [10]: update.title
Out[10]: 'C#'

In [11]: update.desc
Out[11]: 'This is book about C#'

In [12]: Author.objects.get(id = 1).first_name
Out[12]: 'Jane'

In [13]: Author.objects.get(id = 4).first_name
Out[13]: 'William'

In [14]: update_a = Author.objects.get(id = 4)

In [15]: update_a.first_name = "Bill"

In [16]: update_a.save()

In [17]: update_a.first_name
Out[17]: 'Bill'

In [18]: Author.objects.get(id = 1).books.add(Book.objects.get(id = 1))

In [19]: Author.objects.get(id = 1).books.add(Book.objects.get(id = 2))

In [20]: Author.objects.books.all().values
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-20-499851400276> in <module>
----> 1 Author.objects.books.all().values

AttributeError: 'Manager' object has no attribute 'books'

In [21]: Author.objects.get(id=1).books.all().values
Out[21]: <bound method QuerySet.values of <QuerySet [<Book: Book object (1)>, <Book: Book object (2)>]>>

In [22]: Author.objects.get(id=1).books.all().values()
Out[22]: <QuerySet [{'id': 1, 'title': 'C#', 'desc': 'This is book about C#', 'created_at': datetime.datetime(2019, 4, 18, 20, 56, 27, 698716, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 21, 14, 26, 622319, tzinfo=<UTC>)}, {'id': 2, 'title': 'Java', 'desc': 'This is a book about Java', 'created_at': datetime.datetime(2019, 4, 18, 20, 56, 47, 806738, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 56, 47, 806738, tzinfo=<UTC>)}]>

In [23]: Author.objects.get(id=2).books.add(Book.objects.get(id=1))

In [24]: Author.objects.get(id=2).books.add(Book.objects.get(id=2))

In [25]: Author.objects.get(id=2).books.add(Book.objects.get(id=3))

In [26]: Author.objects.get(id=2).books.all().values()
Out[26]: <QuerySet [{'id': 1, 'title': 'C#', 'desc': 'This is book about C#', 'created_at': datetime.datetime(2019, 4, 18, 20, 56, 27, 698716, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 21, 14, 26, 622319, tzinfo=<UTC>)}, {'id': 2, 'title': 'Java', 'desc': 'This is a book about Java', 'created_at': datetime.datetime(2019, 4, 18, 20, 56, 47, 806738, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 56, 47, 806738, tzinfo=<UTC>)}, {'id': 3, 'title': 'Python', 'desc': 'This is a book about Python', 'created_at': datetime.datetime(2019, 4, 18, 20, 57, 3, 538835, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 57, 3, 538835, tzinfo=<UTC>)}]>

In [27]: Author.objects.get(id=3).books.add(Book.objects.get(id=1))

In [28]: Author.objects.get(id=3).books.add(Book.objects.get(id=2))

In [29]: Author.objects.get(id=3).books.add(Book.objects.get(id=3))

In [30]: Author.objects.get(id=3).books.add(Book.objects.get(id=4))

In [31]: Author.objects.get(id=4).books.add(Book.objects.all())
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-31-29a167ae1160> in <module>
----> 1 Author.objects.get(id=4).books.add(Book.objects.all())

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\fields\related_descriptors.py in add(self, through_defaults, *objs)
    963                 self._add_items(
    964                     self.source_field_name, self.target_field_name, *objs,
--> 965                     through_defaults=through_defaults,
    966                 )
    967                 # If this is a symmetrical m2m relation to self, add the mirror

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\fields\related_descriptors.py in _add_items(self, source_field_name, target_field_name, through_defaults, *objs)
   1090                         .filter(**{
   1091                             source_field_name: self.related_val[0],
-> 1092                             '%s__in' % target_field_name: new_ids,
   1093                         }))
   1094                 new_ids.difference_update(vals)

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\query.py in filter(self, *args, **kwargs)
    890         set.
    891         """
--> 892         return self._filter_or_exclude(False, *args, **kwargs)
    893
    894     def exclude(self, *args, **kwargs):

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\query.py in _filter_or_exclude(self, negate, *args, **kwargs)
    908             clone.query.add_q(~Q(*args, **kwargs))
    909         else:
--> 910             clone.query.add_q(Q(*args, **kwargs))
    911         return clone
    912

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\sql\query.py in add_q(self, q_object)
   1288         # So, demotion is OK.
   1289         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
-> 1290         clause, _ = self._add_q(q_object, self.used_aliases)
   1291         if clause:
   1292             self.where.add(clause, AND)

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\sql\query.py in _add_q(self, q_object, used_aliases, branch_negated, current_negated, allow_joins, split_subq, simple_col)
   1316                     child, can_reuse=used_aliases, branch_negated=branch_negated,
   1317                     current_negated=current_negated, allow_joins=allow_joins,
-> 1318                     split_subq=split_subq, simple_col=simple_col,
   1319                 )
   1320                 joinpromoter.add_votes(needed_inner)

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\sql\query.py in build_filter(self, filter_expr, branch_negated, current_negated, can_reuse, allow_joins, split_subq, reuse_with_filtered_relation, simple_col)
   1249             col = _get_col(targets[0], join_info.final_field, alias, simple_col)
   1250
-> 1251         condition = self.build_lookup(lookups, col, value)
   1252         lookup_type = condition.lookup_name
   1253         clause.add(condition, AND)

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\sql\query.py in build_lookup(self, lookups, lhs, rhs)
   1114                 return
   1115
-> 1116         lookup = lookup_class(lhs, rhs)
   1117         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all
   1118         # uses of None as a query value unless the lookup supports it.

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\lookups.py in __init__(self, lhs, rhs)
     18     def __init__(self, lhs, rhs):
     19         self.lhs, self.rhs = lhs, rhs
---> 20         self.rhs = self.get_prep_lookup()
     21         if hasattr(self.lhs, 'get_bilateral_transforms'):
     22             bilateral_transforms = self.lhs.get_bilateral_transforms()

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\fields\related_lookups.py in get_prep_lookup(self)
     57                 # only one as we don't get to the direct value branch otherwise.
     58                 target_field = self.lhs.output_field.get_path_info()[-1].target_fields[-1]
---> 59                 self.rhs = [target_field.get_prep_value(v) for v in self.rhs]
     60         return super().get_prep_lookup()
     61

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\fields\related_lookups.py in <listcomp>(.0)
     57                 # only one as we don't get to the direct value branch otherwise.
     58                 target_field = self.lhs.output_field.get_path_info()[-1].target_fields[-1]
---> 59                 self.rhs = [target_field.get_prep_value(v) for v in self.rhs]
     60         return super().get_prep_lookup()
     61

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\fields\__init__.py in get_prep_value(self, value)
    964         if value is None or isinstance(value, OuterRef):
    965             return value
--> 966         return int(value)
    967
    968     def contribute_to_class(self, cls, name, **kwargs):

TypeError: int() argument must be a string, a bytes-like object or a number, not 'QuerySet'

In [32]: Author.objects.get(id=4).books.add(Book.objects.all)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-32-7a05cf809202> in <module>
----> 1 Author.objects.get(id=4).books.add(Book.objects.all)

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\fields\related_descriptors.py in add(self, through_defaults, *objs)
    963                 self._add_items(
    964                     self.source_field_name, self.target_field_name, *objs,
--> 965                     through_defaults=through_defaults,
    966                 )
    967                 # If this is a symmetrical m2m relation to self, add the mirror

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\fields\related_descriptors.py in _add_items(self, source_field_name, target_field_name, through_defaults, *objs)
   1090                         .filter(**{
   1091                             source_field_name: self.related_val[0],
-> 1092                             '%s__in' % target_field_name: new_ids,
   1093                         }))
   1094                 new_ids.difference_update(vals)

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\query.py in filter(self, *args, **kwargs)
    890         set.
    891         """
--> 892         return self._filter_or_exclude(False, *args, **kwargs)
    893
    894     def exclude(self, *args, **kwargs):

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\query.py in _filter_or_exclude(self, negate, *args, **kwargs)
    908             clone.query.add_q(~Q(*args, **kwargs))
    909         else:
--> 910             clone.query.add_q(Q(*args, **kwargs))
    911         return clone
    912

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\sql\query.py in add_q(self, q_object)
   1288         # So, demotion is OK.
   1289         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}
-> 1290         clause, _ = self._add_q(q_object, self.used_aliases)
   1291         if clause:
   1292             self.where.add(clause, AND)

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\sql\query.py in _add_q(self, q_object, used_aliases, branch_negated, current_negated, allow_joins, split_subq, simple_col)
   1316                     child, can_reuse=used_aliases, branch_negated=branch_negated,
   1317                     current_negated=current_negated, allow_joins=allow_joins,
-> 1318                     split_subq=split_subq, simple_col=simple_col,
   1319                 )
   1320                 joinpromoter.add_votes(needed_inner)

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\sql\query.py in build_filter(self, filter_expr, branch_negated, current_negated, can_reuse, allow_joins, split_subq, reuse_with_filtered_relation, simple_col)
   1249             col = _get_col(targets[0], join_info.final_field, alias, simple_col)
   1250
-> 1251         condition = self.build_lookup(lookups, col, value)
   1252         lookup_type = condition.lookup_name
   1253         clause.add(condition, AND)

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\sql\query.py in build_lookup(self, lookups, lhs, rhs)
   1114                 return
   1115
-> 1116         lookup = lookup_class(lhs, rhs)
   1117         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all
   1118         # uses of None as a query value unless the lookup supports it.

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\lookups.py in __init__(self, lhs, rhs)
     18     def __init__(self, lhs, rhs):
     19         self.lhs, self.rhs = lhs, rhs
---> 20         self.rhs = self.get_prep_lookup()
     21         if hasattr(self.lhs, 'get_bilateral_transforms'):
     22             bilateral_transforms = self.lhs.get_bilateral_transforms()

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\fields\related_lookups.py in get_prep_lookup(self)
     57                 # only one as we don't get to the direct value branch otherwise.
     58                 target_field = self.lhs.output_field.get_path_info()[-1].target_fields[-1]
---> 59                 self.rhs = [target_field.get_prep_value(v) for v in self.rhs]
     60         return super().get_prep_lookup()
     61

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\fields\related_lookups.py in <listcomp>(.0)
     57                 # only one as we don't get to the direct value branch otherwise.
     58                 target_field = self.lhs.output_field.get_path_info()[-1].target_fields[-1]
---> 59                 self.rhs = [target_field.get_prep_value(v) for v in self.rhs]
     60         return super().get_prep_lookup()
     61

~\OneDrive\desktop\Coding_Dojo\python_stack\my_environments\django2\lib\site-packages\django\db\models\fields\__init__.py in get_prep_value(self, value)
    964         if value is None or isinstance(value, OuterRef):
    965             return value
--> 966         return int(value)
    967
    968     def contribute_to_class(self, cls, name, **kwargs):

TypeError: int() argument must be a string, a bytes-like object or a number, not 'method'

In [33]: Author.objects.get(id=4).books.add(Book.objects.get(id=1,id=2,id=3,id=4))
  File "<ipython-input-33-6477c96814d6>", line 1
    Author.objects.get(id=4).books.add(Book.objects.get(id=1,id=2,id=3,id=4))
                                                            ^
SyntaxError: keyword argument repeated


In [34]: Author.objects.get(id=4).books.add(Book.objects.get(id = 1))

In [35]: Author.objects.get(id=4).books.add(Book.objects.get(id = 2))

In [36]: Author.objects.get(id=4).books.add(Book.objects.get(id = 3))

In [37]: Author.objects.get(id=4).books.add(Book.objects.get(id = 4))

In [38]: Author.objects.get(id=4).books.add(Book.objects.get(id = 5))

In [39]: Book.objects.get(id=3).authors.all().values()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-39-bd0d7af5736a> in <module>
----> 1 Book.objects.get(id=3).authors.all().values()

AttributeError: 'Book' object has no attribute 'authors'

In [40]: Book.objects.get(id=3).authors.all().first_name
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-40-5c9008393925> in <module>
----> 1 Book.objects.get(id=3).authors.all().first_name

AttributeError: 'Book' object has no attribute 'authors'

In [41]: Book.objects.get(id=3).authors.all()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-41-7e341c8731bc> in <module>
----> 1 Book.objects.get(id=3).authors.all()

AttributeError: 'Book' object has no attribute 'authors'

In [42]: Book.objects.get(id=1).authors.add(Author.objects.get(id=1))
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-42-4c8f02ea3044> in <module>
----> 1 Book.objects.get(id=1).authors.add(Author.objects.get(id=1))

AttributeError: 'Book' object has no attribute 'authors'

In [43]: Book.objects.get(id=1).author.add(Author.objects.get(id=1))
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-43-b8eb238eeb03> in <module>
----> 1 Book.objects.get(id=1).author.add(Author.objects.get(id=1))

AttributeError: 'Book' object has no attribute 'author'

In [44]: Book.objects.get(id=3).__dict__
Out[44]:
{'_state': <django.db.models.base.ModelState at 0x275fea6c0b8>,
 'id': 3,
 'title': 'Python',
 'desc': 'This is a book about Python',
 'created_at': datetime.datetime(2019, 4, 18, 20, 57, 3, 538835, tzinfo=<UTC>),
 'updated_at': datetime.datetime(2019, 4, 18, 20, 57, 3, 538835, tzinfo=<UTC>)}

In [45]: Book.objects.all()
Out[45]: <QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>, <Book: Book object (5)>]>

In [46]: Book.objects.get(id=3).authors.all()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-46-7e341c8731bc> in <module>
----> 1 Book.objects.get(id=3).authors.all()

AttributeError: 'Book' object has no attribute 'authors'

In [47]: Author.objects.get(id=3).books.all().values()
Out[47]: <QuerySet [{'id': 1, 'title': 'C#', 'desc': 'This is book about C#', 'created_at': datetime.datetime(2019, 4, 18, 20, 56, 27, 698716, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 21, 14, 26, 622319, tzinfo=<UTC>)}, {'id': 2, 'title': 'Java', 'desc': 'This is a book about Java', 'created_at': datetime.datetime(2019, 4, 18, 20, 56, 47, 806738, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 56, 47, 806738, tzinfo=<UTC>)}, {'id': 3, 'title': 'Python', 'desc': 'This is a book about Python', 'created_at': datetime.datetime(2019, 4, 18, 20, 57, 3, 538835, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 57, 3, 538835, tzinfo=<UTC>)}, {'id': 4, 'title': 'PHP', 'desc': 'This is a book about PHP', 'created_at': datetime.datetime(2019, 4, 18, 20, 57, 17, 70457, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 57, 17, 70457, tzinfo=<UTC>)}]>

In [48]: quit()
(django2)
Zheng@Leos_Laptop MINGW64 ~/Onedrive/Desktop/Coding_Dojo/python_stack/django/django_intro/books_authors
$ migratioins
bash: migratioins: command not found
(django2)
Zheng@Leos_Laptop MINGW64 ~/Onedrive/Desktop/Coding_Dojo/python_stack/django/django_intro/books_authors
$ migrations
Migrations for 'bna_app':
  apps\bna_app\migrations\0004_auto_20190418_1739.py
    - Alter field books on author
(django2)
Zheng@Leos_Laptop MINGW64 ~/Onedrive/Desktop/Coding_Dojo/python_stack/django/django_intro/books_authors
$ migrate
Operations to perform:
  Apply all migrations: admin, auth, bna_app, contenttypes, sessions
Running migrations:
  Applying bna_app.0004_auto_20190418_1739... OK
(django2)
Zheng@Leos_Laptop MINGW64 ~/Onedrive/Desktop/Coding_Dojo/python_stack/django/django_intro/books_authors
$ dj_shell
Python 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 22:22:05) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.4.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: Book.objects.get(id=3).authors.all().values()
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-1-bd0d7af5736a> in <module>
----> 1 Book.objects.get(id=3).authors.all().values()

NameError: name 'Book' is not defined

In [2]: Book.objects.get(id=3).authors.all().value()
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-2-279fcae8ceec> in <module>
----> 1 Book.objects.get(id=3).authors.all().value()

NameError: name 'Book' is not defined

In [3]: Book.objects.get(id=3)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-3-5c7990d8190f> in <module>
----> 1 Book.objects.get(id=3)

NameError: name 'Book' is not defined

In [4]: Book.objects.all()
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-4-168f25362598> in <module>
----> 1 Book.objects.all()

NameError: name 'Book' is not defined

In [5]: update
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-5-6070278c2e3b> in <module>
----> 1 update

NameError: name 'update' is not defined

In [6]: books.object.all()
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-6-91683621b80f> in <module>
----> 1 books.object.all()

NameError: name 'books' is not defined

In [7]: from apps.bna_app.models import *

In [8]: Book.objects.get(id=3).authors.all().values()
Out[8]: <QuerySet [{'id': 2, 'first_name': 'Emily', 'last_name': 'Dickinson', 'note': None, 'created_at': datetime.datetime(2019, 4, 18, 20, 58, 56, 638664, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 58, 56, 638664, tzinfo=<UTC>)}, {'id': 3, 'first_name': 'Fyodor', 'last_name': 'Dostoevksy', 'note': None, 'created_at': datetime.datetime(2019, 4, 18, 20, 59, 23, 126491, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 59, 23, 126491, tzinfo=<UTC>)}, {'id': 4, 'first_name': 'Bill', 'last_name': 'Shakespeare', 'note': None, 'created_at': datetime.datetime(2019, 4, 18, 20, 59, 43, 304384, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 21, 17, 12, 793329, tzinfo=<UTC>)}]>

In [9]: Book.objects.get(id=3).authors.remove(Author.object.first())
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-9-f32eaab8f657> in <module>
----> 1 Book.objects.get(id=3).authors.remove(Author.object.first())

AttributeError: type object 'Author' has no attribute 'object'

In [10]: Book.objects.get(id=3).authors.remove(Author.object.get(id=1))
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-10-d1a6cc599a69> in <module>
----> 1 Book.objects.get(id=3).authors.remove(Author.object.get(id=1))

AttributeError: type object 'Author' has no attribute 'object'

In [11]: Book.objects.get(id=3).authors.remove(Author.objects.first())

In [12]: Book.objects.get(id=2).authors.add(Author.objects.get(id=5))

In [13]: Author.objects.get(id=3).books.all().values()
Out[13]: <QuerySet [{'id': 1, 'title': 'C#', 'desc': 'This is book about C#', 'created_at': datetime.datetime(2019, 4, 18, 20, 56, 27, 698716, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 21, 14, 26, 622319, tzinfo=<UTC>)}, {'id': 2, 'title': 'Java', 'desc': 'This is a book about Java', 'created_at': datetime.datetime(2019, 4, 18, 20, 56, 47, 806738, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 56, 47, 806738, tzinfo=<UTC>)}, {'id': 3, 'title': 'Python', 'desc': 'This is a book about Python', 'created_at': datetime.datetime(2019, 4, 18, 20, 57, 3, 538835, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 57, 3, 538835, tzinfo=<UTC>)}, {'id': 4, 'title': 'PHP', 'desc': 'This is a book about PHP', 'created_at': datetime.datetime(2019, 4, 18, 20, 57, 17, 70457, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 20, 57, 17, 70457, tzinfo=<UTC>)}]>

In [14]: Book.objects.get(id=5).authors.all().values()
Out[14]: <QuerySet [{'id': 4, 'first_name': 'Bill', 'last_name': 'Shakespeare', 'note': None, 'created_at': datetime.datetime(2019, 4, 18, 20, 59, 43, 304384, tzinfo=<UTC>), 'updated_at': datetime.datetime(2019, 4, 18, 21, 17, 12, 793329, tzinfo=<UTC>)}]>